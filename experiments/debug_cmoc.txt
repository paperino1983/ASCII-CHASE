Salut Pierre,


je ne suis pas encore arrivé à comprendre comment compiler mon code avec cmoc.

Je crois que soit cmoc soit lwlink est buggé. Je ne suis pas sur mais cela devient probable:

le fichier .map contient toutes les fonctions qui doivent etre apellées mais par contre le fichier .bin

est une fraction de sa taille normale (11k ou 12k comme celle produite par cmoc 1.32 dans WinCMOC).


Moi, je ne connais pas l'Assembly 6809. Comment je peux comprendre ce qui n'est pas dans le .bin?
Est-ce que tu pourrais m'aider s'il te plait?

Moi, j'ai regardé dans le fichier .map dans la partie dédié aux symbols pour chaque fichier .o.
Par exemple:
text.o

 Symbol: _displayStats (text.o) = 2FD6
 Symbol: _gameCompleted (text.o) = 2FD7
 Symbol: _printCenteredMessageOnRow (text.o) = 2FE6
 Symbol: _printGameOver (text.o) = 2FEE
 Symbol: _printGhostCountStats (text.o) = 2FFD
 Symbol: _printLevelStats (text.o) = 2FFE
 Symbol: _printLivesStats (text.o) = 2FFF
 Symbol: _printPressKeyToStart (text.o) = 3000
 Symbol: _printStartMessage (text.o) = 300F
 Symbol: _setScreenColors (text.o) = 303A

et cela correspond EXACTEMENT aux fonctions qui sont apellées:

 void printLevelStats(void);
 void printGhostCountStats(void);
 void printLivesStats(void);
 void setScreenColors(void);
 void printCenteredMessageOnRow(unsigned char row, char *Text);
 void printPressKeyToStart(void);
 void printGameOver(void);
 void printStartMessage(void);
 void gameCompleted(void);
 void displayStats(void);

Pareil sur les autres fichiers.




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''







strategy.o

_blindChaseCharacterXStrategy
_blindChaseCharacterYStrategy
_chaseCharacter
_move
_moveTowardCharacter

unsigned char move(Character* hunterPtr, Character* preyPtr, unsigned char offset);
void blindChaseCharacterXStrategy(Character* hunterPtr, Character* preyPtr);			
void blindChaseCharacterYStrategy(Character* hunterPtr, Character* preyPtr);
void moveTowardCharacter(Character *hunterPtr);
void chaseCharacter(Character *preyPtr, unsigned short slowDown);	

	
---------------------------------------------
character.o

 _checkBombsVsGhost
 _checkBombsVsGhosts
 _deleteCharacter
 _die
 _displayCharacter
 _ghostDies
 _initializeCharacter
 _isCharacterAtLocation
 _playerDies
 _relocateCharacter
 _safeLocation
 _sameLocationAsAnyLocation
 _setCharacterPosition
 _wallReached


 void displayCharacter(Character * characterPtr);
 void deleteCharacter(Character * characterPtr);
 void initializeCharacter(Character* characterPtr, unsigned char x, unsigned char y, unsigned char status, Image * imagePtr);
 void setCharacterPosition(Character* characterPtr, unsigned char x, unsigned char y);
 unsigned char isCharacterAtLocation(unsigned char x, unsigned char y, Character * characterPtr);
 unsigned char wallReached(Character *characterPtr);
 void die(Character * playerPtr);
 void playerDies(void);
 void checkBombsVsGhost(Character * ghostPtr);						
 void checkBombsVsGhosts(void);					
 unsigned char safeLocation(unsigned char x, unsigned char y, Character *danger, unsigned char dangerSize);
 void relocateCharacter(Character * characterPtr, Character *danger, unsigned char dangerSize);
 void ghostDies(Character * ghostPtr);
 unsigned char sameLocationAsAnyLocation(unsigned char x, unsigned char y, Character *characterList, unsigned char length);

 -----------------------------------------------------
 
 enemy.o
 
 _displayGhosts
 _displayBombs
 _computeGhostSlowDown
 
unsigned short computeGhostSlowDown(void) 
void displayGhosts(void)
void displayBombs(void)

-------------------------------------------------------

level.o

void fillLevelWithCharacters(unsigned char nGhosts)


--------------------------------------------------------

text.o

 Symbol: _displayStats (text.o) = 2FD6
 Symbol: _gameCompleted (text.o) = 2FD7
 Symbol: _printCenteredMessageOnRow (text.o) = 2FE6
 Symbol: _printGameOver (text.o) = 2FEE
 Symbol: _printGhostCountStats (text.o) = 2FFD
 Symbol: _printLevelStats (text.o) = 2FFE
 Symbol: _printLivesStats (text.o) = 2FFF
 Symbol: _printPressKeyToStart (text.o) = 3000
 Symbol: _printStartMessage (text.o) = 300F
 Symbol: _setScreenColors (text.o) = 303A

 void printLevelStats(void);
 void printGhostCountStats(void);
 void printLivesStats(void);
 void setScreenColors(void);
 void printCenteredMessageOnRow(unsigned char row, char *Text);
 void printPressKeyToStart(void);
 void printGameOver(void);
 void printStartMessage(void);
 void gameCompleted(void);
 void displayStats(void);
 
 ---------------------------------------------------------



 
 
 