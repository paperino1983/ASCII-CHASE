
#if defined(__C64__) || defined(__VIC20__)
     *(char *)0x028a = 0x80;
#endif

10 poke 56576,peek(56576)and252
20 poke53272,32
30 poke648,200


http://www.lemon64.com/forum/viewtopic.php?t=23355&sid=9e5a5ceccf2a6efc567a3a09637a361a


IMHO the best solution for this is to move the active video bank to $c000 ($dd00=0)... 
then you can use $c000 for screen data, and the complete rest of the bank, 
minus $d000-$e000, for sprites.

so... poke56576,0:poke53272,2: ... that will put the screen to $c000 (49152) and 
the charset will be fetched from $c800 (51200) 
(you can copy the original charset there, or use the opportunity and use a custom one). 
then there will be space for sprites from $c400-$c800 and from $e000-$ffff.

one thing i dont remember though, you have to tell the basic where the screen is located now 
(else it will still print to 1024...). 
a quick look at aay64 says the highbyte of the screen memory location should be written to $0288 ... 
so poke 648,192 should do the trick. 


http://atariage.com/forums/topic/149844-cc65-call-to-graphics/


$ cl65 -t atari -Wl -D__RESERVED_MEMORY__=0x2000 -o TGID.COM tgidemo.c

$ cl65 -t atarixl --start-addr 0x4000 -o TGIDXL.COM tgidemo.c

http://www.atarimania.com/documents/Understanding-Atari-Graphics.pdf

java -jar ac.jar -cc65 cc65.dsk test B < hello
java -jar ac.jar -cc65 cc65.dsk [volume name] B < [binary file]


http://macgui.com/kb/article/761


https://archive.org/stream/Programmers_Reference_Guide_for_the_Commodore_Plus_4_1986_Scott_Foresman_Co/Programmers_Reference_Guide_for_the_Commodore_Plus_4_1986_Scott_Foresman__Co#page/n229/mode/2up

page 213
https://archive.org/stream/Programmers_Reference_Guide_for_the_Commodore_Plus_4_1986_Scott_Foresman_Co/Programmers_Reference_Guide_for_the_Commodore_Plus_4_1986_Scott_Foresman__Co#page/n225/mode/2up

$FF0E 0-7 Lowbyteoffrequency for voice 1 
$FF0F 0-7 Lowbyteoffrequency for voice 2 
$FF10 0-1 High 2 bits of frequency forvoice 2 
$FF11 0-3 Volume 
		4 Select voice 1(0=off,1=on) 
		5 Select voice 2(0=off,1=on) 
		6 Select noise forvoice 2(0=off,1=on) 
		7 Soundswitch(0=on,1=off) 
$FF12 0-1 High 2 bits of frequency for voice 1 
	  2-7 Non sounduses
	  
	  
SPECTRUM  
void printAt32Col(unsigned char row, unsigned char col, char* s)
{
    row += 0x20; // add displacement
    col <<= 1; // double column coordinate for 32 column mode
    col += 0x20; // add displacement
    printf("\x16%c%c%s", row, col, s);
}


1. Compile with sccz80 and the classic C library. This is equivalent to pre-1.99A.
2. Compile with sccz80 and the new C library. Compile lines include "-clib=new".
3. Compile with sdcc and the new C library. Compile lines include "-clib=sdcc_ix" or "-clib=sdcc_iy".

..org $6000   

_debut:
      ld a,0
      ld ($47FD),a  ;poke 47FD c'est pour un curseur fixe

      ld h,20  ; cordonnée y
      ld l,20    ;coordonnée x
      ld d,65  ; caractere
      ld e,1    ; couleur
      call $0092    ;routine affichage
      jp _debut

The parameters are pushed left to right as dom mentioned and followed by a call to the asm subroutine.  This means the asm subroutine sees a stack frame containg pushed parameters followed by a return address.  It is usually (but not always) faster to access the parameters by popping them off the stack.  So for example:

int myfunc(int a, int b)
{
   #asm
   pop bc   ; bc = ret address
   pop hl   ; hl = int b
   pop de  ; de = int a

   push de    ; now restore stack
   push hl
   push bc

   ; do stuff with return value left in hl

   #endasm
}  // ret automatically inserted by C compiler at end brace

The push / pops require 63 cycles to get all the parameters into the registers.  Other methods would take longer.


The standard C calling convention has the caller responsible for creating the stack frame and removing the stack frame following the call to the subroutine.  This is why you see the asm function above restoring the stack after popping the parameters -- the stack must be left unchanged for the caller to restore it on return.

You can specify an asm function to be callee-linked, meaning the subroutine is responsible for clearing the stack frame from the stack.  Then the above would be written as:

int __CALLEE__ myfunc(int a, int b)
{
   #asm
   pop bc   ; bc = ret address
   pop hl   ; hl = int b
   pop de  ; de = int a
   push bc  ; put the return address back

   ; do stuff with return value left in hl

   #endasm
}  // ret automatically inserted by C compiler at end brace

Now the asm function has removed the parameters from the stack frame and has left the return address for safe ret at the end of the subroutine.  All asm subroutines should use CALLEE linkage as there is almost never a reason not to use it.


One last linkage is FASTCALL where a single parameter can be passed by the compiler in the HL register pair.

int __FASTCALL__ myfunc(int a)
{
   #asm
   ; hl = int a
   ; return address on stack

   ; do stuff with return value left in hl
   #endasm
}  // ret automatically inserted by C compiler at end brace


.org $6000   
_debut:
      DI
       
      ld a,0
      ld ($47FD),a  ;poke 47FD c'est pour un curseur fixe
      ld a,65
      ld h,20  ; cordonnée y
      ld l,20    ;coordonnée x
      ld d,65  ; caractere
      ld e,1    ; couleur
      call $0092    ;routine affichage
       
	  EI
	  
	  
					//CLEAR_SCREEN();
					//sleep(1);
					//PING_SOUND();
					printExtraLife();
					//sleep(1);
					++lives;

					
.org $6000   
     
     
_debut:
        
	 ld hl,_ef9345;------1 seul foi--------
      call $00AD
     
      
      
      ld h,20  ; cordonnée y
      ld l,20    ;coordonnée x
      ld d,65  ; caractere
      ld e,1    ; couleur 
      call $0092 
      ld h,20  ; cordonnée y
      ld l,26    ;coordonnée x
      ld d,68  ; caractere
      ld e,4    ; couleur 
      call $0092 
     jp _debut 
     
_ef9345:     
.db $04,$20,$82,$29,$00
;$04 nombre d'octet qui suit soit 4 octets à injecter dans l'EF9345 
                        ;$20 écriture
                        ;$82 adresse --MAT--
                        ;$29 validation donnée
                        ;00 donnée
					
					
					
How can I avoid prototyping
unsigned int in_inkey(void) in my code, which is using a macro, (in my own input.h file):
unsigned int in_inkey(void);
#define MOVE_PLAYER() {kbInput = in_inkey(); movePlayerByKeyboard(kbInput)} ;

My code is including input.h in multiple files including my own input.h and my main.c.

If I remove the prototype I get in_inkey is not found and the compiler "suggests" to prototype it.

-------------------------------------------------------------------------------------


Try something like the following:

Code: Select all
MEMORY {
    ZP: start =  $0002, size = $001A, type = rw, define = yes;
    SCREEN: start =  $1000, size = $0200;
    STARTRAM: start = $11FF, size = $0201, define = yes, file = %O, fill = yes;
    RAM: start = $1200, size = $0A00, define = yes, file = %O, fill = yes;
    CHAR: start = $1C00, size = $0400, type = rw,  define = yes, fill = yes;
    RAM1: start = $2000, size = $4000, type = rw, file = %O;
}
SEGMENTS {
    STARTUP:  load = STARTRAM, type = ro;
    LOWCODE:  load = STARTRAM, type = ro,               optional = yes;
    UDCCHAR:  load = CHAR, type = rw, define = yes, optional = no;
    INIT:     load = RAM, type = ro, define = yes, optional = yes;
    CODE:     load = RAM1, type = ro, define = yes;
    RODATA:   load = RAM, type = ro;
    DATA:     load = RAM, type = rw;
    ZPSAVE:   load = RAM,             type = bss, define   = yes;
    BSS:      load = RAM, type = bss, define = yes;
    HEAP:     load = RAM, type = bss, optional = yes; # must sit just below stack
    ZEROPAGE: load = ZP,  type = zp;
}
FEATURES {
    CONDES: segment = INIT,
       type = constructor,
       label = __CONSTRUCTOR_TABLE__,
       count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
       type = destructor,
       label = __DESTRUCTOR_TABLE__,
       count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
       type = interruptor,
       label = __INTERRUPTOR_TABLE__,
       count = __INTERRUPTOR_COUNT__;
}
SYMBOLS {
    __STACKSIZE__ = $400;   # 1K stack
}



Then compile the UDCs @ $1C00 by including them in the appropriate segment:

e.g.

Code: Select all
   .segment "UDCCHAR"
      .export _Charset

_Charset:

char0: .byte  $1C,$22,$4A,$56,$4C,$20,$1E,$00
char1: .byte  $18,$24,$42,$7E,$42,$42,$42,$00
etc...


and reference as..

Code: Select all

typedef unsigned char BYTE;

extern BYTE Charset[];



finally in your 'c' code something like this to point the VIC-1 chip at the correct location...

Code: Select all
   
   
   BYTE  tmp;
   tmp = ~0x0F & PEEK(&(VIC.addr));
   POKE(&(VIC.addr), tmp | 0x0F);
   

----------------------------------------
http://www.atarimagazines.com/compute/issue41/Apple_Sounds_From_Beeps_To_Music.php
-------------------------------------------------------------------------------------------------------------

# Memory configuration for the VIC-20 with 16K RAM Cartridge
# Contributed by Stefan Haubenthal
SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0100; # 256 byte stack
}
MEMORY {
    ZP:       file = "", define = yes, start = $0002, size = $001A;
    SCREEN:   start =  $1000, size = $0200;
    LOADADDR: file = %O,               start = $11FF, size = $0002;
    HEADER:   file = %O,               start = $1201, size = $000C;
	MAIN:     file = %O, define = yes, start = $120D, fill = yes, size = $1C00 - $120D;
    CHARMEM:  file = %O, start = $1C00, size = $0400, type = rw,  define = yes, fill = yes;
    RAM1: 	  file = %O, start = $2000, size = $4000, type = rw;}

SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = MAIN,     type = ro;
    LOWCODE:  load = MAIN,     type = ro,  optional = yes;
    ONCE:     load = MAIN,     type = ro,  optional = yes;
    CODE:     load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = bss;
    BSS:      load = MAIN,     type = bss, define   = yes;
    UDCCHAR:  load = CHARMEM,  type = ro, define = yes, optional = no;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}

   