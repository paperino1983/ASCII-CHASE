EXOS is the operating system (Enterprise eXpandable Operating System) and LPT is the line parameter table, I think the easiest way will be to use EXOS from C, I found some useful links:
z88dk libsrc (i think these commands can be used from C) : https://github.com/z88dk/z88dk/tree/master/libsrc/enterprise/
Enterprise variables in z88DK: https://raw.githubusercontent.com/z88dk/z88dk/master/include/enterprise.h
and a z88DK source: http://z88dk.cvs.sourceforge.net/viewvc/z88dk/z88dk/examples/enterprise/mandel.c?view=markup
 
//      Initialize a custom video mode (HW text mode, 2 colour characters)
        exos_set_vmode(VM_HW_TXT,CM_2,40,25);
 
// Clear screen
        exos_write_character(DEFAULT_VIDEO, 0x1A);
// Set cursor position (i guess)
        esccmd_cmd='=';
        esccmd_x=x+32;
        esccmd_y=y+32;
        exos_write_block(DEFAULT_VIDEO, 6, esccmd);
// Print text after the cursor position was set (i guess)
        text='Test text';
        exos_write_block(DEFAULT_VIDEO, 9, text);
 
I did not find anything for keyboard in z88DK :(, but if you do not find either, we will solve on another way
 
Sound works also by writing escape sequences
 
 
Useful escape sequences which should be able to use with exos_write_character:
Clear entire page and home cursor/beam: 0x1Ah
position cursor:                                                = y x
     This sets the cursor to row y-20h and column x-20h. If either x or y is 20h (thus setting the row or column zero) then that co­ordinate will remain unchanged
Define Character:                                             esc K n r1 r2 r3 r4 r5 r6 r7 r8 r9
     n caharacter number (0-255), r1-r9 are the bytes for the nine rows of the  character. r1 is the top row.
Set whole Palette:                                            esc C c1 c2 c3 c4 c5 c6 c7 c8
    c1-c8 is a byte specifying the corresponding palette colours and there must always be eight of them.
Set 1 colour in palette:                                     esc c n c
    n is the palette colour number 0..7 and c is the new value for this palette colour. 
Set ink colour to n:                                            esc I n
    ink is set to n  (0-7) value from palette
    In two colour hardware text mode the ink and paper colours are always (0, 1) or (2, 3). If the ink or paper is changed then the other one is changed to correspond. 
    probably for 4 colours (activate (4,5),(6,7) we have to make an assembly patch in LPT, I do not know if EXOS will keep it or not, if you ready with 2 colour pair mode, I will test it,
Set paper colour to n:                                       esc i n
    Works as set ink, by default n=0, so probably it will not be used.
Cursor left:                                                          0x08    (ASCII  BS)
Cursor right:                                                        0x09    (ASCII TAB)
Cursor up:                                                             0x0b    (ASCII  VT)
Cursor down:                                                        0x16    (ASCII SYN)
Read cursor position:                                         esc ?
Set cursor display off:                                        esc o
 
 
 
 4. Sound Production
To actually produce a sound an escape sequence must be sent which defines the sound. The format of this is:
      esc S env p vl vr sty ch d f
The meanings of these fields are :
env - 8bits. Envelope to use for this sound.
    An envelope number of 255 will produce a "beep" type sound which is of constant amplitude and pitch for the duration of the sound.
p - 16 bits. Starting pitch of sound in 1/512 semitones.
    Only exact quartertones will necessarily be musically correct. The others are generated by linear interpolation. Ignored for noise channel.
vl - 8 bits. Overall left amplitude (0...255)
vr - 8 bits. Overall right amplitude (0...255)
sty - 8 bits. Sound style byte.
    For the noise channel, this byte is put into the noise control register for the duration of the sound.
    For a tone channel the top four bits are put into the four sound control bits in the sound frequency register for that channel, they thus control filtering, distortion and ring modulation.
    Zero gives a pure tone or white noise.
    See separate DAVE chip specification for meaning of each bit in these registers.
ch - 8 bits. Source for this sound
    0, 1 or 2 for the appropriate tone channel and 3 for the noise channel.
d - 16 bits. Duration of this sound in ticks.
f - 8 bits. Flags byte
    b0..b1
        SYNC count for this sound, see later section on synchronisation. 
    b2..b6
        Not used, should be zero. 
    b7
        Set to force override of any sound in queue for this channel, clear to make sound wait its turn.
When a sound is received it is added to the end of the appropriate queue (killing the queue first if bit 7 of the flags byte is set). If the queue is full then there are two courses of action which depend on the state of the EXOS variable WAIT_SND. If this is zero then the sound driver will just wait until there is space in the sound queue, testing the stop key to allow it to be interrupted. If this EXOS variable is non­zero then it will return an error code (.SQFUL) to the user.
 
 3.2 Format of Envelope Definition
Envelopes are defined by an escape sequence sent to the sound channel:
      esc E en ep er [ cp cl cr pd ]*
where : en - (8 bits) Envelope number (0..254)
        ep - (8 bits) Total number of phases 1 .. 40
        er - (8 bits) Number of phases before release.
             If no release phase is required then this should
             be 0FFh which will result in the sound finishing
             as soon as the sound duration is expired.
        Repeat These ep times, once for each phase:
        cp - (16 bits) Pitch change.
        cl -  (8 bits) Left amplitude change.
        cr -  (8 bits) Right amplitude change.
        pd - (16 bits) Phase duration.
 

Fabrizio Caruso <fabrizio_caruso@hotmail.com> írta:
 
Hi

I still don't know what such a table and EXOS are.
Please consider I have zero knowledge about the Enterprise.
What do you mean by a table created by you? It is code? A manual I should follow?
Is EXOS the firmware/operating system?

Can I just simply print characters by escape sequences without any need for such tables?
I just do printf with an Ansi sequence? Which escape sequences should I use?

 
Since I will be using hardware text mode, I would prefer the simplest solution.
How do I do it?

  Fabrizio

 
De : Persa <persa75@freemail.hu>
Envoyé : lundi 16 octobre 2017 07:13
À : Fabrizio Caruso
Objet : Re: Re[2]: Cross chase
 
Hello
 
LPT is the line parameter table the screen is defined by this, if you plan to use firmware calls, then EXOS will handle it. You can print characters by firmware by escape sequences, if you want to poke to VRAM then the video address of the screen should get by firmware return video page address, or getting the address from LPT
1st BFF4-BFF5 (if FF segment paged in to page2, normally it is) contains the LPT address (bb00h on EXOS2.0, and b900h on EXOS2.1
2nd reading from LPT address+0x14-and 0x15 gives back the address of 1st screen row (it is Nick address, so will you get probably 0xEyyy which means the address on FF szegment, but it is paged into Page2 so z80 sees it in range 0x8000-0xBFFF thus the address to poke is LPT address-0x4000)
Ex, I checked 1st row was in LPT, in this case poke address:
0xE5A2-0x4000=0xA5A2
The problem is that addressing is not always continuous, any row can be on different place, ex 2nd row can be on 0xF000 and 3rd row can be on 0xe5ea.
if you chose this poking method and EXOS defined LPT then the address should be asked for every row:
1st LPT address +0x14 and 0x15
2st LPT address +0x24 and 0x25
.
.
.
24th LPT address +0x184 and 0x185
 
2nd possibility, normally the best, and fastest I do not know which page can be used in C:
Build an own LPT for 40x25 character mode, ex by modifying EXOS LPT, and using our fix addresses, which can be used later for poking.
 
3rd comfortable solution, but the slowest ( but as you use character mode, it should be fast enough)
using firmware to define video page, and use firmware to print characters into it.
 
I would prefer 2nd or 3rd solution, and I can help you to make updates in LPT for using specific addresses, or I can help you to define video page by firmware.

Fabrizio Caruso <fabrizio_caruso@hotmail.com> írta:
 
Hi!

I plan a version on ANY 8 bit computers with at least 16k of ram (or at least expandable to 16k) for which a C CROSS compiler exists. So Enterprise is in my wish list.
Graphics is independent of the game but I tend to prefer hardware text mode for the initial implementation.
What is an LPT? I will use Z88DK APIs if there are any. Once I tried to poke to video ram but I could not understand how to draw characters.

  Fabrizio

--
Envoyé depuis l'application myMail pour Android

dimanche, 15 octobre 2017, 10:07AM +02:00 de Persa persa75@freemail.hu:
 
 
Hello Fabrizio
 
Do not you plan an Enterprise version also?
It could be done on a HW character screen (it would be fast), or on an attribute screen (it would be slower) which is similar to Speccy attribute screen, just the addressing is continuous, and it has 8x1 attribute instead of speccy 8x8, or I can build an LPT (it defines a screen on EP) which has speccy like attributs (8x8) just the size is bigger 40x25, and addressing is continuous, but in this case firmware can not be used to draw to the screen.
 
Best regards:
 
Noel Persa